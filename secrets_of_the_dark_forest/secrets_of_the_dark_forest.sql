/* Проект «Секреты Тёмнолесья»
 * Цель проекта: изучить влияние характеристик игроков и их игровых персонажей 
 * на покупку внутриигровой валюты «райские лепестки», а также оценить 
 * активность игроков при совершении внутриигровых покупок
 * 
 * Автор: Исаева Дарья Максимовна
 * Дата: 02.10.2024
*/

-- Часть 1. Исследовательский анализ данных
-- Задача 1. Исследование доли платящих игроков
---------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------
-- 1.1. Доля платящих пользователей по всем данным:

-- В данном запросе рассчитано общее количество зарегистрированных в игре пользователей, общее количество игроков, которые покупают внутриигровую 
-- валюту (платящие игроки) и доля платящих игроков от общего количества пользователей, зарегистрированных в игре. 

WITH -- (Используем CTE чтобы легче рассчитать долю платящих игроков, обращаясь к псевдонимам (total_users, payer_users) в основном запросе)
total_payer_user AS (
	SELECT COUNT(id) AS total_users, -- (Считаем общее количество пользователей.)
		(SELECT COUNT(id)
		 FROM fantasy.users 
		 WHERE payer = 1) AS payer_users -- (Считаем количество пользователей, которые покупали внутриигровую валюту.)
	FROM fantasy.users
)
SELECT *,
		payer_users::float/total_users AS share_payer_users -- (Считаем долю платящих игроков от общего количества игроков)
FROM total_payer_user;

---------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------

-- 1.2. Доля платящих пользователей в разрезе расы персонажа:

-- В данном запросе изучается взаимосвязь между долей платящих игроков и расой персонажа

WITH 
--(Иcпользуем CTE для расчета общего количества игроков в разрезе расы)
table_total_users AS (  
	SELECT race_id,
		 	 COUNT(id) AS total_users
	FROM fantasy.users
	GROUP BY race_id
),
--(Иcпользуем CTE для расчета количества платящих игроков в разрезе расы)
table_payer_users AS (
	SELECT race_id,
			COUNT(id) AS payer_users
	FROM fantasy.users 
	WHERE payer = 1 
	GROUP BY race_id
)
SELECT race, 
       payer_users,
       total_users,
       payer_users::float/total_users AS share_payer_race --(Рассчитываем долю платящих игроков от общего числа пользовавателей в разрезе расы)
FROM fantasy.race r 
JOIN table_total_users  
USING(race_id)
JOIN table_payer_users
USING(race_id)
ORDER BY total_users DESC; --(Сортировка не требовалась в условии задачи, но для себя я отсортировала по популярности расы среди всех пользователей)

---------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------

-- Задача 2. Исследование внутриигровых покупок
-- 2.1. Статистические показатели по полю amount:

-- В данном запросе рассчитаны основные статистические показатели по полю amount (покупка)

SELECT COUNT(amount) AS count_amount, --(Расчет общего количества покупок)
		SUM(amount) AS sum_amount, --(Расчет суммарной стоимости всех покупок)
		MIN(amount) AS min_amount, --(Минимальная стоимость покупки)
		MAX(amount) AS max_amount, --(Максимальная стоимость покупки)
		AVG(amount) AS avg_amount, --(Среднее значение по столбцу amount)
		PERCENTILE_DISC(0.5) WITHIN GROUP(ORDER BY amount) AS mediana_amount, --(Медиана по столбцу amount)
		STDDEV(amount) AS stddev_amount --(Стандартное отклонение рассчитанное по столбцу amount)
FROM fantasy.events;

---------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------
-- 2.2: Аномальные нулевые покупки:

-- В данном запросе рассчитаны количество аномальных значений (0) по полю amount и их доля от общего числа покупок

WITH --(Используем CTE для расчета всех пользователей и пользователей с аномальным значением покупки равной 0)
table_anomal_amount AS (
	SELECT COUNT(amount) AS total_amount,
			COUNT(CASE WHEN amount = 0
						THEN amount
				  END) AS anomal_amount
	FROM fantasy.events
)
SELECT *,
		anomal_amount::float/total_amount AS share_anomal_amount --(Рассчитываем долю аномальных значений от общего числа покупок)
FROM table_anomal_amount;

---------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------

-- 2.3: Сравнительный анализ активности платящих и неплатящих игроков:

-- В запросе сравнивается активность платящих и неплатящих игроков по покупке эпических предметов за внутриигровую валюту. 
-- Для каждой группы рассчитаны общее количество игроков, среднее количество покупок и среднюю суммарную стоимость покупок на одного игрока.

WITH --(Исключаем покупки с аномальным значением)
new_events AS (
	SELECT *
	FROM fantasy.events
	WHERE amount > 0
),
--(Рассчитываем количество игроков, количество покупок, сумму покупок в разрезе платящих и неплатящих игроков)
new_table AS (
	SELECT payer,
			COUNT(DISTINCT id) AS count_users,
			COUNT(amount) AS count_events,
			SUM(amount) AS sum_amount
	FROM new_events
	JOIN fantasy.users AS u
	USING(id)
	GROUP BY payer
)
SELECT CASE WHEN payer = 0
			THEN 'Неплатящие игроки'
			WHEN payer = 1
			THEN 'Платящие игроки'
		END AS payer,
		 count_users,
		 count_events::float/count_users AS avg_count_users, --(Рассчитываем среднее число покупок на одного игрока в разрезе платящих и неплатящих игроков как 
		 																												--  количество игроков/количество покупок)
		 sum_amount::float/count_users AS avg_sum_amount	 --(Рассчитываем среднюю суммарную стоимость покупок на одного игрока в разрезе платящих и неплатящих игроков как 
		 																												--  сумму покупок/количество покупок)
FROM new_table;

---------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------

-- 2.4: Популярные эпические предметы:

--В запросе рассчитывается популярность эпических предметов по общему количеству внутриигровых продаж в абсолютном и относительном значениях. 
--Относительное значение это доля продаж каждого предмета от всех продаж. Результат отсортирован по популярности эпического предмета среди игроков.

WITH --(Исключаем покупки с аномальным значением)
new_events AS (
    SELECT *
    FROM fantasy.events
    WHERE amount > 0
),
-- (Считаем количество продаж и уникальных игроков для каждого эпического предмета)
item_stats AS (
    SELECT 
        item_code, 
        COUNT(amount) AS amount_item,  
        COUNT(DISTINCT id) AS unique_buyers 
    FROM new_events
    GROUP BY item_code
),
-- (Считаем общее количество продаж всех предметов и общее количество уникальных игроков)
total_stats AS (
    SELECT 
        COUNT(amount)  AS total_amount,  
        COUNT(DISTINCT id) AS total_users 
    FROM new_events
)
SELECT 
    game_items,
    amount_item, 
    amount_item::float / (SELECT total_amount
    						FROM total_stats) AS amount_share, -- (Доля продаж предмета от всех продаж)
    unique_buyers::float / (SELECT total_users
    						FROM total_stats) AS users_share -- (Доля игроков, купивших предмет хотя бы раз)
FROM item_stats 
JOIN fantasy.items 
USING(item_code)
ORDER BY amount_item DESC; -- (Сортируем по популярности эпического предмета среди игроков)

---------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------

-- Часть 2. Решение ad hoc-задач
-- Задача 1. Зависимость активности игроков от расы персонажа:

--В запросе рассчитаны показатели каждой игровой расы для анализа зависимости игроков от выбранной расы персонажа

WITH  --(Исключаем покупки с аномальным значением)
new_events AS (
    SELECT *
    FROM fantasy.events
    WHERE amount > 0
),
--(Рассчитываем количество игроков в разрезе расы)
race_stat AS ( 
	SELECT race,
		COUNT(race_id) AS count_race
	FROM fantasy.race 
	JOIN fantasy.users 
	USING(race_id)
	GROUP BY race
),
--(Рассчитываем показатели по игрокам, которые совершали покупкии группируем по расе)
event_stat AS (
	SELECT race,
			COUNT(DISTINCT id) AS count_amount_race, --(Количество уникальных игроков, совершавших внутриигровые покупки в разрезе расы)
			COUNT(amount) AS total_count_amounts, --(Количество всех покупок в разрезе расы)
			SUM(amount) AS sum_amount_race, -- (Сумма всех покупок в разрезе расы)
			SUM(amount)::float/COUNT(DISTINCT id) AS avg_total_sum, --(средняя суммарная стоимость всех покупок на одного игрока.)
			SUM(amount)::float/COUNT(id) AS avg_sum_amount, -- (средняя стоимость одной покупки на одного игрока)
			COUNT(amount)::float/COUNT(DISTINCT id) AS avg_count_total -- (среднее количество покупок на одного игрока)
	FROM new_events
	JOIN fantasy.users
	USING(id)
	JOIN fantasy.race
	USING(race_id)
	GROUP BY race
),
--(Рассчитываем количество уникальных платящих игроков в разделе расы)
payer_race AS (
	SELECT race,
			COUNT(DISTINCT id) AS payer_users
	FROM new_events
	JOIN fantasy.users
	USING(id)
	JOIN fantasy.race
	USING(race_id)
	WHERE payer = 1
	GROUP BY race
)
SELECT race, --(раса)
		count_race, --(Количество игроков в каждой расе)
		count_amount_race, --(Количество игроков, которые совершают внутриигровые покупки)
		count_amount_race::float/count_race AS share_amount_users, --(Доля игроков, которые совершают внутриигровые покупки от общего количества)
		payer_users::float/count_amount_race AS share_payer_users, --(Доля платящих игроков от количества игроков, которые совершили внутриигровые покупки)
		avg_count_total, -- (Среднее количество покупок на одного игрока)
		avg_sum_amount, -- (Средняя стоимость одной покупки на одного игрока)
		avg_total_sum -- (Cредняя суммарная стоимость всех покупок на одного игрока)
FROM race_stat
JOIN event_stat
USING(race)
JOIN payer_race
USING(race);

---------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------

-- Задача 2: Частота покупок

-- В запросе пользователи представлены в разрезе трех групп на основе их частоты покупок, для каждой группы рассчитаны количество пользователей, 
-- совершавших внутриигровые покупки, количество платящих пользователей и их доля от общего количества игроков совершивших покупку, среднее количество покупок на одного игрока и 
-- среднее количество дней между покупками на одного игрока. 

WITH --(Исключаем покупки с аномальным значением, переводим формат поля date в формат date, выгружаем нужные для последующих расчетов поля)
new_events AS ( 
    SELECT e.id, 
           e.date::date, 
           u.payer, 
           e.amount,
           LAG(e.date::date) OVER (PARTITION BY e.id ORDER BY e.date::date) AS prev_date --(Дата предыдущей покупки в разрезе пользователя)
    FROM fantasy.events AS e
    JOIN fantasy.users AS u
    USING(id)
    WHERE e.amount > 0
),
--(Рассчитываем средний интервал между покупками в разрезе пользователя, рассчитываем количество всех покупок для каждого пользователя 
												-- и фильтруем по значению количество всех покупок > 24 ("которые совершили 25 или более покупок"))
interval_costs AS ( 
    SELECT id, 
           payer,
           COUNT(amount) AS count_costs,
           AVG(date - prev_date) AS intervals_costs
    FROM new_events
    GROUP BY id, payer
    HAVING COUNT(amount) > 24
),
--(Делим нашу выгрузку на три примерно равные части по среднему количеству дней между покупками с учётом минимального количества покупок на одного игрока.)
info_users_costs AS (
    SELECT *,
           NTILE(3) OVER (ORDER BY intervals_costs) AS category_users
    FROM interval_costs
)
SELECT 
    CASE WHEN category_users = 1
    	THEN 'высокая частота'
    	WHEN category_users = 2
    	THEN 'умеренная частота'
    	WHEN category_users = 3
    	THEN 'низкая частота'
    	END AS category,
    COUNT(id) AS total_users, -- (количество игроков, которые совершили покупки в разрезе трех примерно равных частей по частоте покупок)
    COUNT(CASE WHEN payer = 1 
    			THEN id 
    	  END) AS total_payer, --(количество ПЛАТЯЩИХ игроков, которые совершили покупки в разрезе трех примерно равных частей по частоте покупок)
    (COUNT(CASE WHEN payer = 1 THEN id END)::float/COUNT(id)) AS share_payer, --(доля ПЛАТЯЩИХ игроков от общего количества игроков совершивших покупку, в разрезе трех групп)
    AVG(count_costs) AS avg_count_costs, --(среднее количество покупок на одного игрока в разрезе трех примерно равных частей по частоте покупок)
    AVG(intervals_costs) AS avg_intervals_costs --(среднее количество дней между покупками на одного игрока в разрезе трех примерно равных частей по частоте покупок)
FROM info_users_costs
GROUP BY category_users;

---------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------